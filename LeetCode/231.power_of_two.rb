# @param {Integer} n
# @return {Boolean}
# 判断除以 2 是否有余数
def is_power_of_two(n)
  return false if n.zero?

  n >>= 1 while (n % 2).zero?
  n == 1
end

#   n = 2 ^ 0 = 1 = 0b0000...00000001, and (n - 1) = 0 = 0b0000...0000.
#   n = 2 ^ 1 = 2 = 0b0000...00000010, and (n - 1) = 1 = 0b0000...0001.
#   n = 2 ^ 2 = 4 = 0b0000...00000100, and (n - 1) = 3 = 0b0000...0011.
#   n = 2 ^ 3 = 8 = 0b0000...00001000, and (n - 1) = 7 = 0b0000...0111.
#   按位与
#   def is_power_of_two(n)
#     n.positive? && (n & (n - 1)).zero?
#   end

#   最大值为 2^31 - 1，也就是说如果是2的次方，最大只能取到 2^30，
#   如果n是 2 的次方，那 2^30 % n == 0
#   def is_power_of_two(n)
#     n.positive? && (1073741824 % n).zero?
#   end

#   转为二进制，如果是 2 的次方，则包含 1 的个数为 1
#   def is_power_of_two(n)
#     n.positive? && n.to_s(2).count('1') == 1
#   end

#   打表
#   def is_power_of_two(n)
#     [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16_384, 32_768, 65_536, 131_072, 262_144, 524_288, 1_048_576, 2_097_152, 4_194_304, 8_388_608, 16_777_216, 33_554_432, 67_108_864, 134_217_728, 268_435_456, 536_870_912, 1_073_741_824].include? n
#   end

p is_power_of_two 218
